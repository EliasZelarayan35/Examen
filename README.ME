# Why I've chosen Python as a language

The reason it's very simple. For creating things from scratch is the easiest lenguage and requires the least amount of setup to perform in order to execute a script.
Also I'm leaning python for automation, so that allowed me to write the code in a short amount of time. 

# Web Scraping Test using Selenium and Python

This project demonstrates a basic web scraping test using Selenium and Python. The test is designed to navigate to a website, interact with it, and extract information.

## Test Overview

The test performs the following actions:

1. Opens a Chrome browser.
2. Maximizes the browser window.
3. Navigates to the website: [https://bcncgroup.com/](https://bcncgroup.com/).
4. Waits for 5 seconds to allow the page to load.
5. Accepts the cookies prompt by clicking on the cookie button.
6. Navigates to the 'Who We Are' section.
7. Waits for the 'Who We Are' page to fully load.
8. Extracts all text from the CSS element 'div.page__content.js-page'.
9. Logs the results to a text file.

## Prerequisites

Make sure you have the following installed:

- Python (3.x)
- Selenium library (`pip install selenium`)
- ChromeDriver (compatible with your Chrome browser version)

#API TEST

## Test Overview

The test script performs the following actions:

1. Sends a GET request to the API endpoint: [https://jsonplaceholder.typicode.com/albums](https://jsonplaceholder.typicode.com/albums).
2. Retrieves the response data.
3. Validates the response by checking the text of the first five elements.
4. Logs the validation results.

## Prerequisites

Make sure you have the following installed:

- Python (3.x)
- Requests library (`pip install requests`)

# OAuth 2.0 API Testing with Python

This project demonstrates how to test an OAuth 2.0 protected API using Python. The script supports authentication using both Client Credentials and Authorization Code grant types.

## Authentication Flows

The script supports the following OAuth 2.0 authentication flows:

1. **Client Credentials Flow**: Used when the client application is the resource owner. It involves obtaining an access token directly by authenticating with the authorization server using client credentials.

2. **Authorization Code Flow**: Involves redirecting the user to the authorization server, obtaining authorization, and then exchanging the authorization code for an access token.

## Prerequisites

Before running the script, ensure you have the following:

- Python (3.x)
- `requests` library (install via `pip install requests`)
- Access to an OAuth 2.0 server with appropriate configurations (e.g., token endpoint URLs, client IDs, client secrets, etc.)

## Usage

1. Configure the authentication parameters in the script according to your OAuth 2.0 server setup.
2. Run the script using Python:

in bash run python oauth_api_test.py

## BDD

GIVEN an text (TBD)
AND OAuth 2.0 headers
WHEN I make the call to the https://jsonplaceholder.typicode.com/albums
THEN I verify if the text matches at least the first five records returned
